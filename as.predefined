// as.predefined
// AngelScript definitions

// This file was automatically generated.

enum Key {
	Space,
	Apostrophe,
	Comma,
	Minus,
	Period,
	Slash,
	Num0,
	Num1,
	Num2,
	Num3,
	Num4,
	Num5,
	Num6,
	Num7,
	Num8,
	Num9,
	A,
	B,
	C,
	D,
	E,
	F,
	G,
	H,
	I,
	J,
	K,
	L,
	M,
	N,
	O,
	P,
	Q,
	R,
	S,
	T,
	U,
	V,
	W,
	X,
	Y,
	Z,
	F1,
	F2,
	F3,
	F4,
	F5,
	F6,
	F7,
	F8,
	F9,
	F10,
	F11,
	F12,
	Escape,
	Enter,
	Tab,
	Backspace,
	Insert,
	Delete,
	Right,
	Left,
	Down,
	Up,
	PageUp,
	PageDown,
	Home,
	End,
	CapsLock,
	ScrollLock,
	NumLock,
	PrintScreen,
	Pause,
	LeftShift,
	LeftControl,
	LeftAlt,
	LeftSuper,
	RightShift,
	RightControl,
	RightAlt,
	RightSuper,
	Menu
}
enum MouseButton {
	Left,
	Right,
	Middle
}
namespace Transform {
enum Space {
	Self,
	World
}
}

class string{
	~string();
	string();
	string(const string&in);
	string& opAssign(const string&in);
	string& opAddAssign(const string&in);
	bool opEquals(const string&in) const;
	int opCmp(const string&in) const;
	string opAdd(const string&in) const;
	uint length() const;
	void resize(uint);
	bool isEmpty() const;
	uint8& opIndex(uint);
	const uint8& opIndex(uint) const;
	string& opAssign(double);
	string& opAddAssign(double);
	string opAdd(double) const;
	string opAdd_r(double) const;
	string& opAssign(float);
	string& opAddAssign(float);
	string opAdd(float) const;
	string opAdd_r(float) const;
	string& opAssign(int64);
	string& opAddAssign(int64);
	string opAdd(int64) const;
	string opAdd_r(int64) const;
	string& opAssign(uint64);
	string& opAddAssign(uint64);
	string opAdd(uint64) const;
	string opAdd_r(uint64) const;
	string& opAssign(bool);
	string& opAddAssign(bool);
	string opAdd(bool) const;
	string opAdd_r(bool) const;
	string substr(uint start = 0, int count = - 1) const;
	int findFirst(const string&in, uint start = 0) const;
	int findFirstOf(const string&in, uint start = 0) const;
	int findFirstNotOf(const string&in, uint start = 0) const;
	int findLast(const string&in, int start = - 1) const;
	int findLastOf(const string&in, int start = - 1) const;
	int findLastNotOf(const string&in, int start = - 1) const;
	void insert(uint pos, const string&in other);
	void erase(uint pos, int count = - 1);
	string[]@ split(const string&in) const;
}
class array<T>{
	T& opIndex(uint index);
	const T& opIndex(uint index) const;
	T[]& opAssign(const T[]&in);
	void insertAt(uint index, const T&in value);
	void insertAt(uint index, const T[]&inout arr);
	void insertLast(const T&in value);
	void removeAt(uint index);
	void removeLast();
	void removeRange(uint start, uint count);
	uint length() const;
	void reserve(uint length);
	void resize(uint length);
	void sortAsc();
	void sortAsc(uint startAt, uint count);
	void sortDesc();
	void sortDesc(uint startAt, uint count);
	void reverse();
	int find(const T&in value) const;
	int find(uint startAt, const T&in value) const;
	int findByRef(const T&in value) const;
	int findByRef(uint startAt, const T&in value) const;
	bool opEquals(const T[]&in) const;
	bool isEmpty() const;
	void sort(T[]::less&in, uint startAt = 0, uint count = uint ( - 1 ));
	funcdef bool less(const T&in, const T&in);
}
class dictionaryValue{
	~dictionaryValue();
	dictionaryValue();
	dictionaryValue& opAssign(const dictionaryValue&in);
	dictionaryValue& opHndlAssign(const ?&in);
	dictionaryValue& opHndlAssign(const dictionaryValue&in);
	dictionaryValue& opAssign(const ?&in);
	dictionaryValue& opAssign(double);
	dictionaryValue& opAssign(int64);
	void opCast(?&out);
	void opConv(?&out);
	int64 opConv();
	double opConv();
}
class dictionary{
	dictionary& opAssign(const dictionary&in);
	void set(const string&in, const ?&in);
	bool get(const string&in, ?&out) const;
	void set(const string&in, const int64&in);
	bool get(const string&in, int64&out) const;
	void set(const string&in, const double&in);
	bool get(const string&in, double&out) const;
	bool exists(const string&in) const;
	bool isEmpty() const;
	uint getSize() const;
	bool delete(const string&in);
	void deleteAll();
	string[]@ getKeys() const;
	dictionaryValue& opIndex(const string&in);
	const dictionaryValue& opIndex(const string&in) const;
}
class datetime{
	datetime();
	datetime(const datetime&in);
	datetime(uint, uint, uint, uint = 0, uint = 0, uint = 0);
	datetime& opAssign(const datetime&in);
	uint get_year() const;
	uint get_month() const;
	uint get_day() const;
	uint get_hour() const;
	uint get_minute() const;
	uint get_second() const;
	bool setDate(uint year, uint month, uint day);
	bool setTime(uint hour, uint minute, uint second);
	int64 opSub(const datetime&in) const;
	datetime opAdd(int64 seconds) const;
	datetime opAdd_r(int64 seconds) const;
	datetime& opAddAssign(int64 seconds);
	datetime opSub(int64 seconds) const;
	datetime opSub_r(int64 seconds) const;
	datetime& opSubAssign(int64 seconds);
	bool opEquals(const datetime&in) const;
	int opCmp(const datetime&in) const;
}
class file{
	int open(const string&in, const string&in);
	int close();
	int getSize() const;
	bool isEndOfFile() const;
	string readString(uint);
	string readLine();
	int64 readInt(uint);
	uint64 readUInt(uint);
	float readFloat();
	double readDouble();
	int writeString(const string&in);
	int writeInt(int64, uint);
	int writeUInt(uint64, uint);
	int writeFloat(float);
	int writeDouble(double);
	int getPos() const;
	int setPos(int);
	int movePos(int);
	bool mostSignificantByteFirst;
}
class filesystem{
	bool changeCurrentPath(const string&in);
	string getCurrentPath() const;
	string[]@ getDirs() const;
	string[]@ getFiles() const;
	bool isDir(const string&in) const;
	bool isLink(const string&in) const;
	int64 getSize(const string&in) const;
	int makeDir(const string&in);
	int removeDir(const string&in);
	int deleteFile(const string&in);
	int copyFile(const string&in, const string&in);
	int move(const string&in, const string&in);
	datetime getCreateDateTime(const string&in) const;
	datetime getModifyDateTime(const string&in) const;
}
class any{
	any& opAssign(any&in);
	void store(?&in);
	void store(const int64&in);
	void store(const double&in);
	bool retrieve(?&out);
	bool retrieve(int64&out);
	bool retrieve(double&out);
}
class ref{
	~ref();
	ref();
	ref(const ref&in);
	ref(const ?&in);
	void opCast(?&out);
	ref& opHndlAssign(const ref&in);
	ref& opHndlAssign(const ?&in);
	bool opEquals(const ref&in) const;
	bool opEquals(const ?&in) const;
}
class weakref<T>{
	~weakref();
	weakref(int&in);
	weakref(int&in, T@);
	T@ opImplCast();
	T@ get() const;
	weakref<T>& opHndlAssign(const weakref<T>&in);
	weakref<T>& opAssign(const weakref<T>&in);
	bool opEquals(const weakref<T>&in) const;
	weakref<T>& opHndlAssign(T@);
	bool opEquals(const T@) const;
}
class const_weakref<T>{
	~const_weakref();
	const_weakref(int&in);
	const_weakref(int&in, const T@);
	const T@ opImplCast() const;
	const T@ get() const;
	const_weakref<T>& opHndlAssign(const const_weakref<T>&in);
	const_weakref<T>& opAssign(const const_weakref<T>&in);
	bool opEquals(const const_weakref<T>&in) const;
	const_weakref<T>& opHndlAssign(const T@);
	bool opEquals(const T@) const;
	const_weakref<T>& opHndlAssign(const weakref<T>&in);
	bool opEquals(const weakref<T>&in) const;
}
class Vector2{
	Vector2();
	Vector2(float x, float y);
	float magnitude();
	float sqrMagnitude();
	Vector2 normalized();
	void normalize();
	float dot(Vector2 other);
	void scale(Vector2 by);
	string toString();
	Vector2 opAdd(Vector2 other);
	Vector2 opSub(Vector2 other);
	Vector2 opMul(float other);
	Vector2 opDiv(float other);
	Vector2 opAddAssign(Vector2 other);
	Vector2 opSubAssign(Vector2 other);
	Vector2 opMulAssign(float other);
	Vector2 opDivAssign(float other);
	Vector2 opNeg();
	bool opEquals(Vector2 other);
	bool opNotEquals(Vector2 other);
	float x;
	float y;
}
class Vector3{
	Vector3();
	Vector3(float x, float y, float z);
	float magnitude();
	float sqrMagnitude();
	Vector3 normalized();
	void normalize();
	float dot(Vector3 other);
	Vector3 cross(Vector3 other);
	void scale(Vector3 by);
	string toString();
	Vector3 opAdd(Vector3 other);
	Vector3 opSub(Vector3 other);
	Vector3 opMul(float other);
	Vector3 opDiv(float other);
	Vector3 opAddAssign(Vector3 other);
	Vector3 opSubAssign(Vector3 other);
	Vector3 opMulAssign(float other);
	Vector3 opDivAssign(float other);
	Vector3 opNeg();
	bool opEquals(Vector3 other);
	bool opNotEquals(Vector3 other);
	float x;
	float y;
	float z;
}
class Vector4{
	Vector4();
	Vector4(float x, float y, float z, float w);
	float magnitude();
	float sqrMagnitude();
	Vector4 normalized();
	void normalize();
	float dot(Vector4 other);
	void scale(Vector4 by);
	string toString();
	Vector4 opAdd(Vector4);
	Vector4 opSub(Vector4);
	Vector4 opMul(float);
	Vector4 opDiv(float);
	Vector4 opAddAssign(Vector4);
	Vector4 opSubAssign(Vector4);
	Vector4 opMulAssign(float);
	Vector4 opDivAssign(float);
	Vector4 opNeg();
	bool opEquals(Vector4);
	bool opNotEquals(Vector4);
	float x;
	float y;
	float z;
	float w;
}
class Color{
	Color();
	Color(float r, float g, float b);
	Color(float r, float g, float b, float a);
	Color clamped() const;
	void clamp();
	Color alphaBlend(const Color&in background) const;
	Color grayscale() const;
	Color inverted() const;
	Color withAlpha(float newAlpha) const;
	Color adjustBrightness(float factor) const;
	Color adjustSaturation(float factor) const;
	Color adjustHue(float degrees) const;
	uint toRGBA8() const;
	string toString() const;
	string toHexString() const;
	Color opAdd(const Color&in rhs) const;
	Color opSub(const Color&in rhs) const;
	Color opMul(float scalar) const;
	Color opMul(const Color&in rhs) const;
	Color opDiv(float scalar) const;
	Color& opAddAssign(const Color&in rhs);
	Color& opSubAssign(const Color&in rhs);
	Color& opMulAssign(float scalar);
	Color& opMulAssign(const Color&in rhs);
	Color& opDivAssign(float scalar);
	bool opEquals(const Color&in rhs) const;
	bool opNotEquals(const Color&in rhs) const;
	float r;
	float g;
	float b;
	float a;
}
class Quaternion{
	Quaternion();
	Quaternion(float, float, float, float);
	float magnitude();
	float sqrMagnitude();
	Quaternion normalized();
	void normalize();
	float dot(Quaternion);
	float inverse();
	Vector3 eulerAngles();
	Vector3 getForward();
	Vector3 getUp();
	Vector3 getRight();
	string toString();
	Quaternion opAdd(Quaternion);
	Quaternion opSub(Quaternion);
	Quaternion opMul(float);
	Quaternion opMul(Quaternion);
	Vector3 opMul(Vector3);
	Quaternion opDiv(float);
	Quaternion opNeg();
	bool opEquals(Quaternion);
	bool opNotEquals(Quaternion);
	float x;
	float y;
	float z;
	float w;
}
class Matrix4x4{
	~Matrix4x4();
	Matrix4x4();
	float get(int x, int y);
	void set(int x, int y, float value);
	Matrix4x4 opMul(Matrix4x4 other);
	Vector4 opMul(Vector4 other);
	bool opEquals(Matrix4x4 other);
	bool opNotEquals(Matrix4x4 other);
	Vector3 transformPoint(Vector3 point);
	Vector3 transformPointAffine(Vector3 point);
	Vector3 transformDirection(Vector3 direction);
	Vector3 transformNormal(Vector3 normal);
	Matrix4x4 inverse();
	Matrix4x4 transpose();
	float determinant();
	void decompose(Vector3&out translation, Quaternion&out rotation, Vector3&out scale);
	string toString();
}
class Transform{
	Vector3 GetPosition() const;
	void SetPosition(const Vector3&in position);
	void Translate(const Vector3&in translation);
	void Translate(const Vector3&in translation, Transform::Space relativeTo);
	Quaternion GetRotation() const;
	void SetRotation(const Quaternion&in rotation);
	void Rotate(const Vector3&in eulerAngles);
	void Rotate(const Vector3&in axis, float angle);
	void Rotate(const Quaternion&in rotation);
	void LookAt(const Vector3&in target, const Vector3&in worldUp = Vector3 ( 0 , 1 , 0 ));
	Vector3 GetScale() const;
	void SetScale(const Vector3&in scale);
	void SetScale(float uniformScale);
	Vector3 GetForward() const;
	Vector3 GetRight() const;
	Vector3 GetUp() const;
	Matrix4x4 GetLocalToWorldMatrix() const;
	Matrix4x4 GetWorldToLocalMatrix() const;
	Transform@ GetParent() const;
	void SetParent(Transform@ newParent);
	Vector3 TransformPoint(const Vector3&in point) const;
	Vector3 TransformDirection(const Vector3&in direction) const;
	Vector3 InverseTransformPoint(const Vector3&in worldPoint) const;
	Vector3 InverseTransformDirection(const Vector3&in worldDirection) const;
}
class Camera{
	void setViewportSize(uint width, uint height);
	float getAspectRatio();
	void setFOV(float degrees);
	float getFOV();
	void setNearPlane(float near);
	void setFarPlane(float far);
	void setNearFarPlanes(float near, float far);
	float getNearPlane();
	float getFarPlane();
	Matrix4x4 getProjectionMatrix();
	Matrix4x4 getViewMatrix();
	Transform@ getTransform();
	Vector3 getForward();
	Vector3 getRight();
	Vector3 getUp();
	Vector3 getPosition();
	void processKeyboard(float dt);
	void processMouseMovement(Vector2 mouseDelta, bool constrainPitch = true);
	float speed;
	float sensitivity;
}

string formatInt(int64 val, const string&in options = "", uint width = 0);
string formatUInt(uint64 val, const string&in options = "", uint width = 0);
string formatFloat(double val, const string&in options = "", uint width = 0, uint precision = 0);
int64 parseInt(const string&in, uint base = 10, uint&out byteCount = 0);
uint64 parseUInt(const string&in, uint base = 10, uint&out byteCount = 0);
double parseFloat(const string&in, uint&out byteCount = 0);
string join(const string[]&in, const string&in);
void throw(const string&in);
string getExceptionInfo();
void print(const string&in);
void print(const int&in);
void print(const float&in);
void print(const double&in);
void print(const bool&in);
namespace Vector2 { float angle(Vector2 a, Vector2 b); }
namespace Vector2 { float distance(Vector2 a, Vector2 b); }
namespace Vector2 { Vector2 lerp(Vector2 a, Vector2 b, float t); }
namespace Vector2 { Vector2 lerpUnclamped(Vector2 a, Vector2 b, float t); }
namespace Vector2 { Vector2 moveTowards(Vector2 a, Vector2 b, float maxDelta); }
namespace Vector2 { float reflect(Vector2 vector, Vector2 normal); }
namespace Vector2 { Vector2 scale(Vector2 vector, Vector2 by); }
namespace Vector2 { Vector2 zero(); }
namespace Vector2 { Vector2 one(); }
namespace Vector2 { Vector2 up(); }
namespace Vector2 { Vector2 down(); }
namespace Vector2 { Vector2 left(); }
namespace Vector2 { Vector2 right(); }
namespace Vector3 { float angle(Vector3 from, Vector3 to); }
namespace Vector3 { float signedAngle(Vector3 from, Vector3 to, Vector3 axis); }
namespace Vector3 { float distance(Vector3 a, Vector3 b); }
namespace Vector3 { Vector3 lerp(Vector3 a, Vector3 b, float t); }
namespace Vector3 { Vector3 lerpUnclamped(Vector3 a, Vector3 b, float t); }
namespace Vector3 { Vector3 moveTowards(Vector3 a, Vector3 b, float maxDelta); }
namespace Vector3 { Vector3 reflect(Vector3 vector, Vector3 normal); }
namespace Vector3 { Vector3 project(Vector3 vector, Vector3 onNormal); }
namespace Vector3 { Vector3 projectOnPlane(Vector3 vector, Vector3 planeNormal); }
namespace Vector3 { Vector3 scale(Vector3 a, Vector3 b); }
namespace Vector3 { Vector3 zero(); }
namespace Vector3 { Vector3 one(); }
namespace Vector3 { Vector3 up(); }
namespace Vector3 { Vector3 down(); }
namespace Vector3 { Vector3 left(); }
namespace Vector3 { Vector3 right(); }
namespace Vector3 { Vector3 forward(); }
namespace Vector3 { Vector3 back(); }
namespace Vector4 { float distance(Vector4, Vector4); }
namespace Vector4 { Vector4 lerp(Vector4, Vector4, float); }
namespace Vector4 { Vector4 lerpUnclamped(Vector4, Vector4, float); }
namespace Vector4 { Vector4 moveTowards(Vector4, Vector4, float); }
namespace Vector4 { Vector4 scale(Vector4, Vector4); }
namespace Vector4 { Vector4 scale(float, Vector4); }
namespace Vector4 { Vector4 project(Vector4, Vector4); }
namespace Vector4 { Vector4 zero(); }
namespace Vector4 { Vector4 one(); }
namespace Vector4 { Vector4 identity(); }
namespace Color { Color black(); }
namespace Color { Color white(); }
namespace Color { Color red(); }
namespace Color { Color green(); }
namespace Color { Color blue(); }
namespace Color { Color yellow(); }
namespace Color { Color cyan(); }
namespace Color { Color magenta(); }
namespace Color { Color gray(); }
namespace Color { Color transparent(); }
namespace Color { Color fromHSV(float h, float s, float v, float a = 1.0f); }
namespace Color { void toHSV(const Color&in color, float&out h, float&out s, float&out v); }
namespace Color { Color fromRGBA8(uint8 r, uint8 g, uint8 b, uint8 a = 255); }
namespace Color { Color fromHex(uint hexValue); }
namespace Color { Color lerp(const Color&in a, const Color&in b, float t); }
namespace Color { Color lerpUnclamped(const Color&in a, const Color&in b, float t); }
namespace Quaternion { Quaternion identity(); }
namespace Quaternion { Quaternion angleAxis(float, Vector3); }
namespace Quaternion { Quaternion euler(float, float, float); }
namespace Quaternion { Quaternion euler(Vector3); }
namespace Quaternion { Quaternion fromToRotation(Vector3, Vector3); }
namespace Quaternion { Quaternion lookRotation(Vector3, Vector3 = Vector3 ( 0 , 1 , 0 )); }
namespace Quaternion { float angle(Quaternion, Quaternion); }
namespace Quaternion { Quaternion lerp(Quaternion, Quaternion, float); }
namespace Quaternion { Quaternion slerp(Quaternion, Quaternion, float); }
namespace Quaternion { Quaternion rotateTowards(Quaternion, Quaternion, float); }
namespace Matrix4x4 { Matrix4x4 identity(); }
namespace Matrix4x4 { Matrix4x4 translation(Vector3 translation); }
namespace Matrix4x4 { Matrix4x4 rotation(Quaternion rotation); }
namespace Matrix4x4 { Matrix4x4 scale(Vector3 scale); }
namespace Matrix4x4 { Matrix4x4 TRS(Vector3 translation, Quaternion rotation, Vector3 scale); }
namespace Matrix4x4 { Matrix4x4 perspective(float fovY, float aspect, float near, float far); }
namespace Matrix4x4 { Matrix4x4 orthographic(float left, float right, float bottom, float top, float near, float far); }
namespace Matrix4x4 { Matrix4x4 lookAt(Vector3 position, Vector3 target, Vector3 up); }
namespace Matrix4x4 { Matrix4x4 fromAxisAngle(Vector3 axis, float angle); }
float abs(float x);
float sqrt(float x);
float pow(float x, float p);
float ceil(float x);
float floor(float x);
float round(float x);
float clamp(float x, float minVal, float maxVal);
float clamp01(float x);
float lerp(float a, float b, float t);
float min(float a, float b);
float max(float a, float b);
int min(int a, int b);
int max(int a, int b);
namespace Math { float abs(float x); }
namespace Math { float sqrt(float x); }
namespace Math { float pow(float x, float p); }
namespace Math { float ceil(float x); }
namespace Math { float floor(float x); }
namespace Math { float round(float x); }
namespace Math { float clamp(float x, float minVal, float maxVal); }
namespace Math { float clamp01(float x); }
namespace Math { float lerp(float a, float b, float t); }
namespace Math { float min(float a, float b); }
namespace Math { float max(float a, float b); }
namespace Math { int min(int a, int b); }
namespace Math { int max(int a, int b); }
namespace Math { float radians(float deg); }
namespace Math { float degrees(float rad); }
namespace Math { float sin(float x); }
namespace Math { float cos(float x); }
namespace Math { float tan(float x); }
namespace Math { float asin(float x); }
namespace Math { float acos(float x); }
namespace Math { float atan(float x); }
namespace Math { float atan2(float y, float x); }
namespace Math { int ceilToInt(float x); }
namespace Math { int floorToInt(float x); }
namespace Math { int roundToInt(float x); }
namespace Math { float repeat(float t, float length); }
namespace Math { float pingPong(float t, float length); }
namespace Math { float lerpUnclamped(float value1, float value2, float t); }
namespace Math { float lerpAngle(float a, float b, float t); }
namespace Math { float inverseLerp(float a, float b, float t); }
namespace Math { float deltaAngle(float current, float target); }
namespace Math { float moveTowards(float current, float target, float maxDelta); }
namespace Math { float moveTowardsAngle(float current, float target, float maxDelta); }
namespace Math { float smoothStep(float from, float to, float t); }
namespace Math { float smoothDamp(float current, float target, float&out currentVelocity, float smoothTime, float maxSpeed = Math :: Infinity, float deltaTime = 0.02f); }
namespace Math { float smoothDampAngle(float current, float target, float&out currentVelocity, float smoothTime, float maxSpeed = Math :: Infinity, float deltaTime = 0.02f); }
namespace Math { bool approximately(float a, float b); }
namespace Math { bool isPowerOfTwo(int x); }
namespace Math { int nextPowerOfTwo(int x); }
namespace Math { int closestPowerOfTwo(int x); }
namespace Math { float gammaToLinearSpace(float x); }
namespace Math { float linearToGammaSpace(float x); }
namespace Math { float log(float x, float base); }
namespace Math { float log10(float x); }
namespace Math { float sign(float x); }
namespace Input { bool IsKeyPressed(Key key); }
namespace Input { bool WasKeyPressed(Key key); }
namespace Input { bool WasKeyReleased(Key key); }
namespace Input { bool IsMouseButtonPressed(MouseButton button); }
namespace Input { bool WasMouseButtonPressed(MouseButton button); }
namespace Input { bool WasMouseButtonReleased(MouseButton button); }
namespace Input { Vector2 GetMousePosition(); }
namespace Input { Vector2 GetMouseDelta(); }
namespace Input { Vector2 GetMouseScrollDelta(); }
namespace Input { void SetMousePosition(float x, float y); }
namespace Input { void ResetMouseDelta(); }
namespace Input { void CaptureMouse(bool capture); }
namespace Input { void CaptureMouseResetDelta(bool capture); }
namespace Input { bool IsMouseCaptured(); }

float PI;
namespace Math { float PI; }
namespace Math { float Deg2Rad; }
namespace Math { float Rad2Deg; }
namespace Math { float Epsilon; }
namespace Math { float Infinity; }
namespace Math { float NegativeInfinity; }
Vector3 sunDir;
Camera camera;
float dt;

